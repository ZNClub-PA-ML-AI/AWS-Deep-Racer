{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "def reward_function(params):\n",
    "\n",
    "    \n",
    "\n",
    "    FUTURE_STEP = 6\n",
    "    TURN_THRESHOLD_SPEED = 6    \n",
    "    SPEED_THRESHOLD_SLOW = 1.8  \n",
    "    SPEED_THRESHOLD_FAST = 2   \n",
    "\n",
    "\n",
    "    FUTURE_STEP_STRAIGHT = 8\n",
    "    TURN_THRESHOLD_STRAIGHT = 25   \n",
    "    STEERING_THRESHOLD = 11       \n",
    "\n",
    "    TOTAL_NUM_STEPS = 675 # (15 steps per second, therefore < 45 secs)\n",
    "\n",
    "    # Read input parameters\n",
    "    all_wheels_on_track = params['all_wheels_on_track']\n",
    "    closest_waypoints = params['closest_waypoints']\n",
    "    distance_from_center = params['distance_from_center']\n",
    "    is_offtrack = params['is_offtrack']\n",
    "    progress = params['progress']\n",
    "    speed = params['speed']\n",
    "    steering_angle = params['steering_angle']\n",
    "    steps = params['steps']\n",
    "    track_width = params['track_width']\n",
    "    waypoints = params['waypoints']\n",
    "\n",
    "\n",
    "    def find_curve(waypoints, closest_waypoints, future_step):\n",
    "     \n",
    "        point_prev = waypoints[closest_waypoints[0]]\n",
    "        point_next = waypoints[closest_waypoints[1]]\n",
    "        #TBD\n",
    "        point_future = waypoints[min(len(waypoints) - 1,closest_waypoints[1] + future_step)]\n",
    "   \n",
    "        heading_current = math.degrees(math.atan2(point_prev[1]-point_next[1],point_prev[0] - point_next[0]))\n",
    "        heading_future = math.degrees(math.atan2(point_prev[1] - point_future[1], point_prev[0] - point_future[0]))\n",
    "\n",
    "        diff_heading = abs(heading_current - heading_future)\n",
    "     \n",
    "        if diff_heading > 180:diff_heading = 360 - diff_heading\n",
    "       \n",
    "        dist_future = np.linalg.norm([point_next[0] - point_future[0],point_next[1] - point_future[1]])  \n",
    "\n",
    "        return diff_heading, dist_future\n",
    "\n",
    "\n",
    "    def select_speed(waypoints, closest_waypoints, future_step):\n",
    "        \n",
    "        diff_heading, dist_future = find_curve(waypoints,closest_waypoints,future_step)\n",
    "        #TBD\n",
    "        if diff_heading < TURN_THRESHOLD_SPEED:     \n",
    "            go_fast = True\n",
    "        else:   \n",
    "            go_fast = False\n",
    "\n",
    "        return go_fast\n",
    "\n",
    "\n",
    "    def select_straight(waypoints, closest_waypoints, future_step):\n",
    "      \n",
    "        diff_heading, dist_future = find_curve(waypoints,closest_waypoints,future_step)\n",
    "\n",
    "        if diff_heading < TURN_THRESHOLD_STRAIGHT:\n",
    "            go_straight = True\n",
    "        else:\n",
    "            go_straight = False\n",
    "\n",
    "        return go_straight\n",
    "\n",
    "\n",
    "    if is_offtrack:\n",
    "        reward = 1e-3\n",
    "        return float(reward)\n",
    "    \n",
    " \n",
    "    reward = 1 - (distance_from_center/(track_width/2))**(1/4) \n",
    "\n",
    "    \n",
    "    if (steps % 50) == 0 and progress/100 > (steps/TOTAL_NUM_STEPS):\n",
    "        reward += progress - (steps/TOTAL_NUM_STEPS)*100\n",
    "\n",
    "   \n",
    "    stay_straight = select_straight(waypoints, closest_waypoints,FUTURE_STEP_STRAIGHT)\n",
    "    \n",
    "    if stay_straight and abs(steering_angle) < STEERING_THRESHOLD:\n",
    "        reward += 0.3\n",
    "\n",
    "    go_fast = select_speed(waypoints, closest_waypoints, FUTURE_STEP)\n",
    "\n",
    "    if go_fast and speed > SPEED_THRESHOLD_FAST and abs(steering_angle) < STEERING_THRESHOLD:\n",
    "        reward += 2.0\n",
    "\n",
    "    elif not go_fast and speed < SPEED_THRESHOLD_SLOW:\n",
    "        reward += 0.5    \n",
    " \n",
    "    if not all_wheels_on_track:\n",
    "        reward -= 0.5\n",
    "\n",
    "    reward = max(reward, 1e-3)\n",
    "    return float(reward)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
